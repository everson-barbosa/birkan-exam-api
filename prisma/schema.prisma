// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  CREATED
  ACTIVED
  INACTIVED
}

enum OutboxStatus {
  PENDING
  PROCESSED
}

model OutBoxEvent {
  id          String       @id @default(uuid())
  topic       String
  payload     String
  createdAt   DateTime     @default(now())
  processedAt DateTime?
  status      OutboxStatus @default(PENDING)

  @@index([processedAt])
}

model User {
  id       String @id() @default(uuid())
  email    String @unique()
  name     String
  password String

  status       UserStatus
  questions    Question[]
  ExamTemplate ExamTemplate[]
}

model Question {
  id        String @id() @default(uuid())
  authorId  String
  statement String

  author        User                      @relation(fields: [authorId], references: [id])
  examTemplates QuestionsOnExamTemplate[]
  alternatives  QuestionAlternative[]
}

model QuestionAlternative {
  id         String  @id() @default(uuid())
  text       String
  isCorrect  Boolean
  questionId String

  question Question @relation(fields: [questionId], references: [id])
}

model QuestionsOnExamTemplate {
  examTemplate   ExamTemplate @relation(fields: [examTemplateId], references: [id])
  question       Question     @relation(fields: [questionId], references: [id])
  examTemplateId String
  questionId     String

  @@id([examTemplateId, questionId])
}

enum ExamTemplateStatus {
  SKETCH
  PUBLISHED
  CANCELED
}

model ExamTemplate {
  id          String             @id() @default(uuid())
  authorId    String
  title       String
  description String
  status      ExamTemplateStatus
  createdAt   DateTime           @default(now())
  updatedAt   DateTime?

  author    User                      @relation(fields: [authorId], references: [id])
  questions QuestionsOnExamTemplate[]
}
